62일차

능력단위: 애플리케이션 구현





Spring 스프링?
* EJB를 주 프레임워크로 사용할 때 불편했던 점들을 해소
* Apache2.0 License로 공개됨
* 로드 존슨이 출간한 도서의 코드가 Spring의 근간이 됨

스프링 프레임워크(Spring framework)란?
* java 엔터라이즈 개발을 편하게 해주는 오픈소스
경량급 애플리케이션 프레임워크

* 애플리케이션 프레임워크
특정 계층이나 기술, 업무 분야에 국한되지 않고 애플리케이션의
전영역을 포괄하는 범용적인 프레임워크를 말함

* 경량급 프레임워크
단순한 웹 컨테이너에서도 엔터프라이즈 개발의
고급기술을 대부분 사용할 수 있음

장점
*엔터프라이즈 개발 용이: 개발자가 복잡하고 실수하기 쉬운 Low Level에 많이 신경 쓰지 않으면서 Business Logic 개발에 전념할 수 있도록 해줌

*오픈소스: Spring은 OpenSource의 장점을 충분히 취하면서
동시에 OpenSource 제품의 단점과 한계를 잘 극복함

-Spring Framework의 특징-

*컨테이너 역할
Spring 컨테이너는 Java 객체의 Life Cycle을 관리하며, 
Spring 컨테이너로부터 필요한 객체를 가져와 사용할 수 있다

*DI(Dependency Injection) 지원
Spring은 설정 파일이나 어노테이션을 통해서 객체 간의 
의존관계를 설정할 수 있도록 하고 있다.

*AOP(Aspect Oriented Programming) 지원
Spring은 트랜잭션이나 로깅, 보안과 같이 공통적으로 
필요로 하는 모듈들을 실제 핵심 모듈에서 분리해서 적용할 수 있다.

*POJO(Plain Old Java Object) 지원
Spring 컨테이너에 저장되는 Java 객체는 특정한 인터페이스를
구현하거나, 특정 클래스를 상속받지 않아도 된다.

*트랜잭션 처리를 위한 일관된 방법을 지원
JDBC, JPA 등 어떤 트랜잭션을 사용하던 설정을 통해
정보를 관리하므로 트랜잭션 구현에 상관없이 동일한
코드 사용 가능

*영속성(Persistence)과 관련된 다양한 API 지원
Spring은 Mybatis, Hibernate 등 데이터베이스 처리를 위한
ORM(Object Relational Mapping) 프레임워크들과의 연동 지원


* IoC(Inversion of Control)의 개념
제어의 역전이란, 객체의 생성, 생명주기의 관리까지 
모든 객체에 대한 제어권이 바뀌었다는 것을 의미

* IoC컨테이너
스프링 프레임워크도 객체에 대한 생성 및 생명주기를 관리할 수 있는 기능을 제공하고 있음. 즉 IoC 컨테이너 기능을 제공한다.

특징
IoC 컨테이너는 객체의 생성을 책임지고, 의존성을 관리한다.
POJO의 생성, 초기화, 서비스, 소멸에 대한 권한을 가진다
개발자들이 직접 POJO를 생성할 수 있지만 컨테이너에게 맡긴다

개발자 테스트
TDD(Test Driven Development) 방법론 -> 애자일 방법론

구현 -> 테스트 -> 완료 -> 재분석...

테스트1 -> 구현1 -> 테스트2 -> 구현2 -> 완료 ->...

JUnit 
Java에서 독립된 단위테스트(Unit Test)를 지원해주는 
프레임워크

소스 코드의 특정 모듈이 의도된 대로 정확히 작동하는지
검증하는 절차
즉, 모든 함수와 메서드에 대한 테스트 케이스(Test Case)를
작성하는 절차를 말함

EduDao
학생의 이름 테스트

무조건 main에서 구현할 기능을 만든다
최소한의 수행만 가능하도록 (미구현)

test에서 동일한 형태의 구조로 테스트 클래스를 만든다
테스트를 수행할 수 있도록 내용을 구성한다.
main에서 test의 결과가 잘 반영될 수 있도록 내용을 구현한다

@Test
선언된 메서드는 테스트를 수행하는 메서더가 됨
Junit은 각각의 테스트가 서로 영향을 주지 않고 독립적으로
실행됨을 원칙으로 하므로 @Test 마다 객체를 생성함

@Ignore
선언된 메서드는 테스트를 실행하지 않게 함

@Before
선언된 메서드는 @Test 메서드가 실행되기 전에 반드시 실행함
@Test 메서드에서 공통으로 사용하는 코드를
@Before 메서드에 선언하여 사용한다 

@After
선언된 메서드는 @Test 메서드가 실행된 후 실행됨

@BeforeClass
@Test 메서드 보다 먼저 한번만 수행되어야 할 경우에
사용한다

@AfterClass
@Test 메서드 보다 나중에 한번만 수행되어야 할 경우에
사용한다


http://localhost:8090/springHome/home.do


MVC(Model - View - Controller)
모델 - 뷰 - 컨트롤러 목적
Business Logic과 Presentation Logic을 분리하기 위함

좋은점
사용자 인터페이스로부터 비지니스 로직을 분리하여
애플리케이션의 시각적 요소나 그 이면에서 실행되는
비지니스 로직을 서로 영향없이 쉽게 고칠 수 있는
애플리케이션을 만들 수 있다

*Model : 애플리케이션의 정보(데이터, Bussiness Logic포함)
*View : 사용자에게 제공할 화면(Presentation Logic)
*Controller : Model과 View 사이의 상호 작용을 관리

MVC 컴포넌트의 역할

모델 컴포넌트
* 데이터 저장소(ex: 데이터베이스등)와 연동하여 
사용자가 입력한 데이터나 사용자에게 
출력할 데이터를 다루는 일을 함
* 여러 개의 데이터 변경 작업(추가, 변경, 삭제)을
하나의 작업으로 묶는 트랜잭션을 다루는 일도 함
* Dao클래스, Service클래스에 해당

뷰 컴포넌트
* 모델이 처리한 데이터나 그 작업 결과를 가지고 
사용자에게 출력할 화면을 만드는 일을 함
* 생성된 화면은 웹 브라우저가 출력하고, 
뷰 컴포넌트는 HTML과 CSS, Javascript, jquery를 사용하여
웹 브라우저가 출력할 UI를 만듦
* Html과 JSP(Java Servlet Page)를 사용하여 작성가능함

컨트롤러 컴포넌트
* 클라이언트의 요청을 받았을 때 그 요청에 대해 
실제 업무를 수행하는 모델 컴포넌트를 호출하는 일을 함
* 클라이언트가 보낸 데이터가 있다면, 모델을 호출할 때
전달하기 쉽게 데이터를 적절히 가공하는 일을 함
* 모델이 업무 수행을 완료하면, 그 결과를 가지고
화면을 생성하도록 뷰에게 전달(클라이언트 요청에 대해
모델과 뷰를 결정하여 전달)
* Servlet과 Jsp를 사용하여 작성할 수 있음





















































































































































































































