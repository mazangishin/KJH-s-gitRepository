import java.util.ArrayList;
import java.util.Collections;

public class ArrayListEx8 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		// 리스트는 1차원적인 구조로 데이터를 늘어놓은 형태의 자료구조이다.
//		배열과 흡사하지만 다른 점은 자료를 검색과 추가, 삭제가 아주 용이하다는 것이다.
//		반면에 리스트처럼 1차원적인 구조로 되어있지만 데이터의 추가와 삭제를 제한하여 일정한 규칙으로 추가/삭제를 해야하는 구조도 있다.
//		바로 스택과 큐이다.
//		 배열의 특징 : 배열은 가장 기본적인 형태의 자료구조로 구조가 간단하며 사용하기 쉽고 데이터를 읽어 오는데 걸리는 시간
//		(접근시간, access time) 이 가장 빠르다는 장점을 가지고 있다.
//		단점은
//		1. 크기를 변경할 수 없다.
//		  - 크기를 변경할 수 없으므로 새로운 배열을 생성해서 데이터를 복사하는 작업이 필요하다.
//		  - 실행속도를 향상시키기 위해서는 충분히 큰 크기의 배열을 생성해야 하므로 메모리가 낭비된다.
//		  
//		2. 비순차적인 데이터의 추가 또는 삭제에 시간이 많이 걸린다.
//		  - 차례대로 데이터를 추가하고 마지막에서부터 데이터를 삭제하는 것은 빠르지만,
//		  - 배열의 중간에 디엍를 추가하려면, 빈자리를 만들기 위해 다른 데이터들을 복사해서 이동해야한다.
		
//		 list의 특징
//		배열을 이용한 자료구조는 데이터를 읽어오고 저장하는데는 효율이 좋지만, 용량을 변경해야 할 때는 새로운 배열을 생성한 후
//		기존의 배열로부터 새로 생성된 배열로 데이터를 복사해야하기 때문에 상당히 효율이 떨어진다는 단점을 가지고 있다.
		
		
		ArrayList<String> strList = new ArrayList<String>();
		
		String str = "";
		
		str = "글자1";
		strList.add(str);
		str = "글자2";
		strList.add(str);
		str = "글자3";
		strList.add(str);
		
		for (int i = 0; i < strList.size(); i++) {
			str = strList.get(i);
			System.out.println(str);
		}
		
//		strList.add(12);
	
		// 지네릭스 (generics)
//		다양한 타입의 객체들을 다루는 메서드나 컬렉션 클래스에 컴파일 시의 타입 체크를 해주는 기능이다.
//		객체의 타입을 컴파일 시에 체크하기 때문에 객체의 타입 안정성을 높이고 형변환의 번거로움을 줄여준다.
//		타입의 안정성을 높인다는 것은 의도하지 않은 타입의 객체가 저장되는 것을 막고, 저장된 객체를 꺼내올 때 원래의
//		타입과 다른 타입으로 잘못 형변환되어 발생할 수 있는 오류를 줄여준다는 의미이다.
//		
//		제너릭스의 장점 요약
//		1. 타입 안정성을 제공한다.
//		2. 타입체크와 형변환을 생략할 수 있으므로 코드가 간결해진다.
		
	}
	
	

}
